// <auto-generated />
using System;
using DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200811090134_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Branches","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 315, DateTimeKind.Local).AddTicks(3839),
                            Address = "Address SXM",
                            Name = "SXM",
                            OrganizationId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 315, DateTimeKind.Local).AddTicks(3839),
                            Address = "Address PS",
                            Name = "PS",
                            OrganizationId = 1
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 315, DateTimeKind.Local).AddTicks(3839),
                            Address = "28 May",
                            Name = "28 May filiali",
                            OrganizationId = 2
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 315, DateTimeKind.Local).AddTicks(3839),
                            Address = "Sahil",
                            Name = "Sahil filiali",
                            OrganizationId = 2
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 315, DateTimeKind.Local).AddTicks(3839),
                            Address = "Nerimanov kucesi",
                            Name = "Bash Ofis",
                            OrganizationId = 3
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 315, DateTimeKind.Local).AddTicks(3839),
                            Address = "Gence sheheri",
                            Name = "Gence filiali",
                            OrganizationId = 3
                        });
                });

            modelBuilder.Entity("Models.Entities.BranchUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("BranchUsers","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 317, DateTimeKind.Local).AddTicks(9635),
                            BranchId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 317, DateTimeKind.Local).AddTicks(9635),
                            BranchId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 317, DateTimeKind.Local).AddTicks(9635),
                            BranchId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 317, DateTimeKind.Local).AddTicks(9635),
                            BranchId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 317, DateTimeKind.Local).AddTicks(9635),
                            BranchId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 317, DateTimeKind.Local).AddTicks(9635),
                            BranchId = 5,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuthCertSerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AuthCertThumbPrint")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte>("CertificateStatusId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CertificateTypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SignCertSerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("SignCertThumbPrint")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CertificateStatusId");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Certificates","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)1,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 1,
                            PersonId = 1,
                            Price = 38m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)3,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 1,
                            PersonId = 2,
                            Price = 38m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)2,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 1,
                            PersonId = 3,
                            Price = 50m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)5,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 1,
                            PersonId = 4,
                            Price = 38m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)1,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 1,
                            PersonId = 5,
                            Price = 18m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)3,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 2,
                            PersonId = 6,
                            Price = 38m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 7,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)1,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 2,
                            PersonId = 7,
                            Price = 38m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 8,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)1,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 2,
                            PersonId = 8,
                            Price = 38m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 9,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)1,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 3,
                            PersonId = 9,
                            Price = 48m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        },
                        new
                        {
                            Id = 10,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3398),
                            AuthCertSerialNumber = "11111111111",
                            AuthCertThumbPrint = "AAAAAAAAAAAAAA",
                            CertificateStatusId = (byte)1,
                            CertificateTypeId = (byte)2,
                            ExpireDate = new DateTime(2021, 6, 11, 13, 1, 33, 334, DateTimeKind.Local).AddTicks(3405),
                            OrganizationId = 3,
                            PersonId = 10,
                            Price = 28m,
                            SignCertSerialNumber = "1111111111",
                            SignCertThumbPrint = "AAAAAAAAAAAAA"
                        });
                });

            modelBuilder.Entity("Models.Entities.CertificateStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("CertificateStatuses","status");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Actived",
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Blocked",
                            Name = "BLOCKED"
                        });
                });

            modelBuilder.Entity("Models.Entities.CertificateTimeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IamasBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IamasEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("IamasTime")
                        .HasColumnType("float");

                    b.Property<DateTime>("PersonalizationBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PersonalizationEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("PersonalizationTime")
                        .HasColumnType("float");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("RACABegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RACAEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("RACATime")
                        .HasColumnType("float");

                    b.Property<DateTime>("RequestBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SmsBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SmsEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("SmsTime")
                        .HasColumnType("float");

                    b.Property<double>("TotalRequestTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CertificateTimeLogs","log");
                });

            modelBuilder.Entity("Models.Entities.CertificateType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("CertificateTypes","type");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Citizen",
                            Name = "CITIZEN"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Legal",
                            Name = "LEGAL"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Government",
                            Name = "GOVERNMENT"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "Owner",
                            Name = "OWNER"
                        });
                });

            modelBuilder.Entity("Models.Entities.ChangesLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<byte>("LogTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChangesLogs","log");
                });

            modelBuilder.Entity("Models.Entities.CitizenType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("CitizenTypes","type");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Azerbaijani",
                            Name = "AZERBAIJANI"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Permanent resident",
                            Name = "PERMANENT_RESIDENT"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Temporary resident",
                            Name = "TEMPORARY_RESIDENT"
                        });
                });

            modelBuilder.Entity("Models.Entities.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Claims","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can create citizen certificate",
                            Name = "CAN_CREATE_CITIZEN_CERTIFICATE"
                        },
                        new
                        {
                            Id = 1001,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can create legal certificate",
                            Name = "CAN_CREATE_LEGAL_CERTIFICATE"
                        },
                        new
                        {
                            Id = 1002,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can create owner certificate",
                            Name = "CAN_CREATE_OWNER_CERTIFICATE"
                        },
                        new
                        {
                            Id = 1003,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can create government certificate",
                            Name = "CAN_CREATE_GOVERNMENT_CERTIFICATE"
                        },
                        new
                        {
                            Id = 1004,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can activate certificate",
                            Name = "CAN_ACTIVATE_CERTIFICATE"
                        },
                        new
                        {
                            Id = 1005,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get certificate statuses",
                            Name = "CAN_GET_CERTIFICATE_STATUSES"
                        },
                        new
                        {
                            Id = 1006,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get certificate types",
                            Name = "CAN_GET_CERTIFICATE_TYPES"
                        },
                        new
                        {
                            Id = 1007,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can sign",
                            Name = "CAN_SIGN"
                        },
                        new
                        {
                            Id = 1200,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get discount types",
                            Name = "CAN_GET_DISCOUNT_TYPES"
                        },
                        new
                        {
                            Id = 1201,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get OTP code statuses",
                            Name = "CAN_GET_OTP_CODE_STATUSES"
                        },
                        new
                        {
                            Id = 1202,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get operation price types",
                            Name = "CAN_GET_OPERATION_PRICE_TYPES"
                        },
                        new
                        {
                            Id = 1203,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get token statuses",
                            Name = "CAN_GET_TOKEN_STATUSES"
                        },
                        new
                        {
                            Id = 1204,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get log types",
                            Name = "CAN_GET_LOG_TYPES"
                        },
                        new
                        {
                            Id = 1400,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can add a new user",
                            Name = "CAN_ADD_USER"
                        },
                        new
                        {
                            Id = 1401,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can block a user",
                            Name = "CAN_BLOCK_USER"
                        },
                        new
                        {
                            Id = 1402,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can update user information",
                            Name = "CAN_UPDATE_USER"
                        },
                        new
                        {
                            Id = 1403,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get users",
                            Name = "CAN_GET_USERS"
                        },
                        new
                        {
                            Id = 1404,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can set or modify role on user",
                            Name = "CAN_SET_OR_MODIFY_ROLE_ON_USER"
                        },
                        new
                        {
                            Id = 1405,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get user by id",
                            Name = "CAN_GET_USER_BY_ID"
                        },
                        new
                        {
                            Id = 1406,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get user by username",
                            Name = "CAN_GET_USER_BY_USERNAME"
                        },
                        new
                        {
                            Id = 1407,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get remote operator",
                            Name = "CAN_GET_REMOTE_OPERATOR"
                        },
                        new
                        {
                            Id = 1408,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can update username",
                            Name = "CAN_UPDATE_USERNAME"
                        },
                        new
                        {
                            Id = 1409,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can change password",
                            Name = "CAN_CHANGE_PASSWORD"
                        },
                        new
                        {
                            Id = 1410,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get users for dropdown",
                            Name = "CAN_GET_USERS_FOR_DROPDOWN"
                        },
                        new
                        {
                            Id = 1411,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get gender types",
                            Name = "CAN_GET_GENDER_TYPES"
                        },
                        new
                        {
                            Id = 1412,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get user statuses",
                            Name = "CAN_GET_USER_STATUSES"
                        },
                        new
                        {
                            Id = 1413,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get citizen types",
                            Name = "CAN_GET_CITIZEN_TYPES"
                        },
                        new
                        {
                            Id = 1414,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get person statuses",
                            Name = "CAN_GET_PERSON_STATUSES"
                        },
                        new
                        {
                            Id = 1415,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get claims",
                            Name = "CAN_GET_CLAIMS"
                        },
                        new
                        {
                            Id = 1416,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get roles",
                            Name = "CAN_GET_ROLES"
                        },
                        new
                        {
                            Id = 1500,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can statistic by organization",
                            Name = "CAN_GET_STATISTIC_BY_ORGANIZATION"
                        },
                        new
                        {
                            Id = 1501,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get common statistics",
                            Name = "CAN_GET_COMMON_STATISTICS"
                        },
                        new
                        {
                            Id = 1900,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can add organization",
                            Name = "CAN_ADD_ORGANIZATION"
                        },
                        new
                        {
                            Id = 1901,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can update organization",
                            Name = "CAN_UPDATE_ORGANIZATION"
                        },
                        new
                        {
                            Id = 1902,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get organizations",
                            Name = "CAN_GET_ORGANIZATIONS"
                        },
                        new
                        {
                            Id = 1903,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can add branch",
                            Name = "CAN_ADD_BRANCH"
                        },
                        new
                        {
                            Id = 1904,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can update branch",
                            Name = "CAN_UPDATE_BRANCH"
                        },
                        new
                        {
                            Id = 1905,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can update branch",
                            Name = "CAN_GET_BRANCHES"
                        },
                        new
                        {
                            Id = 1906,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 191, DateTimeKind.Local).AddTicks(1429),
                            Description = "Can get discounts",
                            Name = "CAN_GET_DISCOUNTS"
                        });
                });

            modelBuilder.Entity("Models.Entities.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CertificateTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Coupons","dbo");
                });

            modelBuilder.Entity("Models.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("DiscountTypeId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.ToTable("Discounts","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountTypeId = (byte)1,
                            DiscountValue = 1m,
                            Name = "NO_DISCOUNT"
                        });
                });

            modelBuilder.Entity("Models.Entities.DiscountType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes","type");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Percent",
                            Name = "PERCENT"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Amount",
                            Name = "AMOUNT"
                        });
                });

            modelBuilder.Entity("Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PersonId");

                    b.ToTable("Employees","dbo");
                });

            modelBuilder.Entity("Models.Entities.ExceptionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("ExceptionLogs","log");
                });

            modelBuilder.Entity("Models.Entities.GenderType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("GenderTypes","type");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Female",
                            Name = "FEMALE"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Male",
                            Name = "MALE"
                        });
                });

            modelBuilder.Entity("Models.Entities.LogType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("LogTypes","type");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Change Role",
                            Name = "CHANGE_ROLE"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Change Number",
                            Name = "CHANGE_NUMBER"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Change Pin Code",
                            Name = "CHANGE_PIN_CODE"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "Send SMS",
                            Name = "SEND_SMS"
                        },
                        new
                        {
                            Id = (byte)5,
                            Description = "Sign",
                            Name = "SIGN"
                        },
                        new
                        {
                            Id = (byte)6,
                            Description = "Create certificate start",
                            Name = "CREATE_CERTIFICATE_START"
                        },
                        new
                        {
                            Id = (byte)7,
                            Description = "Create certificate finish",
                            Name = "CREATE_CERTIFICATE_FINISH"
                        },
                        new
                        {
                            Id = (byte)8,
                            Description = "Change Pin Code error",
                            Name = "CHANGE_PIN_CODE_ERROR"
                        },
                        new
                        {
                            Id = (byte)9,
                            Description = "Send SMS error",
                            Name = "SEND_SMS_ERROR"
                        },
                        new
                        {
                            Id = (byte)10,
                            Description = "Create certificate start error",
                            Name = "CREATE_CERTIFICATE_START_ERROR"
                        },
                        new
                        {
                            Id = (byte)11,
                            Description = "Create certificate finish error",
                            Name = "CREATE_CERTIFICATE_FINISH_ERROR"
                        });
                });

            modelBuilder.Entity("Models.Entities.OperationPriceType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("OperationPriceTypes","type");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Sign",
                            Name = "SIGN"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Certificate",
                            Name = "CERTIFICATE"
                        });
                });

            modelBuilder.Entity("Models.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Account")
                        .HasColumnType("int")
                        .IsUnicode(true);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Voen")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Organizations","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account = 1,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 311, DateTimeKind.Local).AddTicks(5038),
                            DiscountId = 1,
                            Name = "MHM",
                            Voen = "11111"
                        },
                        new
                        {
                            Id = 2,
                            Account = 2,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 311, DateTimeKind.Local).AddTicks(5038),
                            DiscountId = 1,
                            Name = "Kapital Bank",
                            Voen = "222222"
                        },
                        new
                        {
                            Id = 3,
                            Account = 1,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 311, DateTimeKind.Local).AddTicks(5038),
                            DiscountId = 1,
                            Name = "Pasha Bank",
                            Voen = "333333"
                        });
                });

            modelBuilder.Entity("Models.Entities.OrganizationDiscount", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationId", "DiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("OrganizationsDiscounts","dbo");
                });

            modelBuilder.Entity("Models.Entities.OtpCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<byte>("OtpCodeStatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("OtpCodeStatusId");

                    b.ToTable("OtpCodes","dbo");
                });

            modelBuilder.Entity("Models.Entities.OtpCodeStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("OtpCodeStatuses","status");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Active",
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Used",
                            Name = "USED"
                        });
                });

            modelBuilder.Entity("Models.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CitizenTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("GenderTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<byte>("PersonStatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CitizenTypeId");

                    b.HasIndex("GenderTypeId");

                    b.HasIndex("PersonStatusId");

                    b.ToTable("Persons","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Samir",
                            Patronymic = "Elmar",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "60LWSDF",
                            Serial = "0686874",
                            Surname = "Hasanov"
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Seymir",
                            Patronymic = "Huseyn",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "20LWSDF",
                            Serial = "8956874",
                            Surname = "Muradov"
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Elbrus",
                            Patronymic = "Elmar",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "60LWGFHT",
                            Serial = "068687456",
                            Surname = "Hesenov"
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Shaxin",
                            Patronymic = "Eldar",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "78TYGFHT",
                            Serial = "0686265",
                            Surname = "Hesenov"
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Asif",
                            Patronymic = "Tofiq",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "89IUYFHT",
                            Serial = "87825878",
                            Surname = "Rzayev"
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Arif",
                            Patronymic = "Elmar",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "895LOI8",
                            Serial = "454575757",
                            Surname = "Quliyev"
                        },
                        new
                        {
                            Id = 7,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Zaur",
                            Patronymic = "Haci",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "RTY7895",
                            Serial = "4545478",
                            Surname = "Melikov"
                        },
                        new
                        {
                            Id = 8,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Ferid",
                            Patronymic = "Veli",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "85RTY45",
                            Serial = "545645767",
                            Surname = "Ismayilov"
                        },
                        new
                        {
                            Id = 9,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Eldar",
                            Patronymic = "Harun",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "89LDJF788",
                            Serial = "86786567",
                            Surname = "Hesenov"
                        },
                        new
                        {
                            Id = 10,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 323, DateTimeKind.Local).AddTicks(8556),
                            CitizenTypeId = (byte)1,
                            Email = "email@gmail.com",
                            GenderTypeId = (byte)2,
                            Name = "Kamil",
                            Patronymic = "Ilqar",
                            PersonStatusId = (byte)1,
                            Phone = "+994111111",
                            Pin = "98JUF232",
                            Serial = "456786786",
                            Surname = "Memmedov"
                        });
                });

            modelBuilder.Entity("Models.Entities.PersonOrganization", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("BranchUserId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "OrganizationId");

                    b.HasIndex("BranchUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("PersonsOrganizations","dbo");
                });

            modelBuilder.Entity("Models.Entities.PersonStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("PersonStatuses","status");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Actived",
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Blocked",
                            Name = "BLOCKED"
                        });
                });

            modelBuilder.Entity("Models.Entities.PinCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CertificateId")
                        .IsUnique();

                    b.ToTable("PinCodes","dbo");
                });

            modelBuilder.Entity("Models.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Positions","dbo");
                });

            modelBuilder.Entity("Models.Entities.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CertificateTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OperationPriceTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("OperationPriceTypeId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Prices","dbo");
                });

            modelBuilder.Entity("Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Roles","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 185, DateTimeKind.Local).AddTicks(9096),
                            Description = "Super Admin",
                            Name = "SUPER_ADMIN"
                        },
                        new
                        {
                            Id = 2000,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 185, DateTimeKind.Local).AddTicks(9096),
                            Description = "Organization Admin",
                            Name = "ORG_ADMIN"
                        },
                        new
                        {
                            Id = 2001,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 185, DateTimeKind.Local).AddTicks(9096),
                            Description = "Manager",
                            Name = "MANAGER"
                        },
                        new
                        {
                            Id = 2002,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 185, DateTimeKind.Local).AddTicks(9096),
                            Description = "Operator",
                            Name = "OPERATOR"
                        },
                        new
                        {
                            Id = 2003,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 185, DateTimeKind.Local).AddTicks(9096),
                            Description = "Seller",
                            Name = "SELLER"
                        });
                });

            modelBuilder.Entity("Models.Entities.RoleClaim", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("RolesClaims","dbo");

                    b.HasData(
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1000
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1001
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1002
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1003
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1004
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1005
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1006
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1007
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1200
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1201
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1202
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1203
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1204
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1400
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1401
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1402
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1403
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1404
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1405
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1406
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1407
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1408
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1409
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1410
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1411
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1412
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1413
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1414
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1415
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1416
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1500
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1501
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1900
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1901
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1902
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1903
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1904
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1905
                        },
                        new
                        {
                            RoleId = 1000,
                            ClaimId = 1906
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1203
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1405
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1411
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1412
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1413
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1415
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1416
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1500
                        },
                        new
                        {
                            RoleId = 2000,
                            ClaimId = 1501
                        },
                        new
                        {
                            RoleId = 2001,
                            ClaimId = 1405
                        },
                        new
                        {
                            RoleId = 2001,
                            ClaimId = 1411
                        },
                        new
                        {
                            RoleId = 2001,
                            ClaimId = 1412
                        },
                        new
                        {
                            RoleId = 2001,
                            ClaimId = 1413
                        },
                        new
                        {
                            RoleId = 2001,
                            ClaimId = 1415
                        });
                });

            modelBuilder.Entity("Models.Entities.SignOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal>("CalculatedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CouponId")
                        .HasColumnType("bigint");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .IsUnicode(true);

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SignSerial")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<DateTime>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("SignOperations","dbo");
                });

            modelBuilder.Entity("Models.Entities.SignTimeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("RequestBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestEnd")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SignTimeLogs","log");
                });

            modelBuilder.Entity("Models.Entities.SmsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("SmsLogs","log");
                });

            modelBuilder.Entity("Models.Entities.TemporaryPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("TemporaryPersons","dbo");
                });

            modelBuilder.Entity("Models.Entities.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("TokenStatusId")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TokenStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens","dbo");
                });

            modelBuilder.Entity("Models.Entities.TokenStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("TokenStatuses","status");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Active",
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Blocked",
                            Name = "BLOCKED"
                        });
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CitizenTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<byte>("GenderTypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CitizenTypeId");

                    b.HasIndex("GenderTypeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Users","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            CitizenTypeId = (byte)1,
                            FullName = "Samir Hasanov",
                            GenderTypeId = (byte)2,
                            LastLoginDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            Password = new byte[] { 234, 202, 187, 230, 14, 107, 194, 209, 102, 205, 249, 209, 54, 83, 54, 70, 15, 58, 17, 72, 209, 248, 9, 92, 43, 83, 39, 87, 175, 192, 208, 128, 163, 179, 161, 87, 147, 173, 60, 38, 214, 111, 102, 204, 75, 173, 92, 4, 242, 129, 209, 125, 151, 149, 119, 4, 149, 29, 192, 65, 23, 44, 219, 116 },
                            PhoneNumber = "11111",
                            Pin = "60LWSJG",
                            RoleId = 1000,
                            Salt = new byte[] { 213, 178, 216, 56, 8, 206, 13, 120, 94, 251, 195, 33, 47, 250, 219, 209, 39, 82, 118, 150, 145, 190, 219, 50, 57, 127, 33, 81, 142, 102, 57, 23, 135, 126, 29, 209, 133, 152, 76, 176, 67, 113, 251, 52, 154, 79, 175, 123, 104, 148, 179, 152, 167, 164, 114, 165, 111, 232, 81, 237, 199, 175, 124, 70 },
                            StatusId = (byte)1,
                            Username = "a"
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            CitizenTypeId = (byte)1,
                            FullName = "Ramiz Aliyev",
                            GenderTypeId = (byte)2,
                            LastLoginDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            Password = new byte[] { 234, 202, 187, 230, 14, 107, 194, 209, 102, 205, 249, 209, 54, 83, 54, 70, 15, 58, 17, 72, 209, 248, 9, 92, 43, 83, 39, 87, 175, 192, 208, 128, 163, 179, 161, 87, 147, 173, 60, 38, 214, 111, 102, 204, 75, 173, 92, 4, 242, 129, 209, 125, 151, 149, 119, 4, 149, 29, 192, 65, 23, 44, 219, 116 },
                            PhoneNumber = "22222",
                            Pin = "70YWUJP",
                            RoleId = 2000,
                            Salt = new byte[] { 213, 178, 216, 56, 8, 206, 13, 120, 94, 251, 195, 33, 47, 250, 219, 209, 39, 82, 118, 150, 145, 190, 219, 50, 57, 127, 33, 81, 142, 102, 57, 23, 135, 126, 29, 209, 133, 152, 76, 176, 67, 113, 251, 52, 154, 79, 175, 123, 104, 148, 179, 152, 167, 164, 114, 165, 111, 232, 81, 237, 199, 175, 124, 70 },
                            StatusId = (byte)1,
                            Username = "b"
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            CitizenTypeId = (byte)1,
                            FullName = "Aydan Memmedova",
                            GenderTypeId = (byte)1,
                            LastLoginDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            Password = new byte[] { 234, 202, 187, 230, 14, 107, 194, 209, 102, 205, 249, 209, 54, 83, 54, 70, 15, 58, 17, 72, 209, 248, 9, 92, 43, 83, 39, 87, 175, 192, 208, 128, 163, 179, 161, 87, 147, 173, 60, 38, 214, 111, 102, 204, 75, 173, 92, 4, 242, 129, 209, 125, 151, 149, 119, 4, 149, 29, 192, 65, 23, 44, 219, 116 },
                            PhoneNumber = "33333",
                            Pin = "70YWUJP",
                            RoleId = 2001,
                            Salt = new byte[] { 213, 178, 216, 56, 8, 206, 13, 120, 94, 251, 195, 33, 47, 250, 219, 209, 39, 82, 118, 150, 145, 190, 219, 50, 57, 127, 33, 81, 142, 102, 57, 23, 135, 126, 29, 209, 133, 152, 76, 176, 67, 113, 251, 52, 154, 79, 175, 123, 104, 148, 179, 152, 167, 164, 114, 165, 111, 232, 81, 237, 199, 175, 124, 70 },
                            StatusId = (byte)1,
                            Username = "c"
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            CitizenTypeId = (byte)1,
                            FullName = "Kamil Huseynov",
                            GenderTypeId = (byte)2,
                            LastLoginDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            Password = new byte[] { 234, 202, 187, 230, 14, 107, 194, 209, 102, 205, 249, 209, 54, 83, 54, 70, 15, 58, 17, 72, 209, 248, 9, 92, 43, 83, 39, 87, 175, 192, 208, 128, 163, 179, 161, 87, 147, 173, 60, 38, 214, 111, 102, 204, 75, 173, 92, 4, 242, 129, 209, 125, 151, 149, 119, 4, 149, 29, 192, 65, 23, 44, 219, 116 },
                            PhoneNumber = "444444",
                            Pin = "70YWUJP",
                            RoleId = 2002,
                            Salt = new byte[] { 213, 178, 216, 56, 8, 206, 13, 120, 94, 251, 195, 33, 47, 250, 219, 209, 39, 82, 118, 150, 145, 190, 219, 50, 57, 127, 33, 81, 142, 102, 57, 23, 135, 126, 29, 209, 133, 152, 76, 176, 67, 113, 251, 52, 154, 79, 175, 123, 104, 148, 179, 152, 167, 164, 114, 165, 111, 232, 81, 237, 199, 175, 124, 70 },
                            StatusId = (byte)1,
                            Username = "d"
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            CitizenTypeId = (byte)1,
                            FullName = "Rauf Quliyev",
                            GenderTypeId = (byte)2,
                            LastLoginDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            Password = new byte[] { 234, 202, 187, 230, 14, 107, 194, 209, 102, 205, 249, 209, 54, 83, 54, 70, 15, 58, 17, 72, 209, 248, 9, 92, 43, 83, 39, 87, 175, 192, 208, 128, 163, 179, 161, 87, 147, 173, 60, 38, 214, 111, 102, 204, 75, 173, 92, 4, 242, 129, 209, 125, 151, 149, 119, 4, 149, 29, 192, 65, 23, 44, 219, 116 },
                            PhoneNumber = "555555",
                            Pin = "70YWUJP",
                            RoleId = 2003,
                            Salt = new byte[] { 213, 178, 216, 56, 8, 206, 13, 120, 94, 251, 195, 33, 47, 250, 219, 209, 39, 82, 118, 150, 145, 190, 219, 50, 57, 127, 33, 81, 142, 102, 57, 23, 135, 126, 29, 209, 133, 152, 76, 176, 67, 113, 251, 52, 154, 79, 175, 123, 104, 148, 179, 152, 167, 164, 114, 165, 111, 232, 81, 237, 199, 175, 124, 70 },
                            StatusId = (byte)1,
                            Username = "e"
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            CitizenTypeId = (byte)1,
                            FullName = "Nermin Rzayeva",
                            GenderTypeId = (byte)1,
                            LastLoginDate = new DateTime(2020, 8, 11, 13, 1, 33, 227, DateTimeKind.Local).AddTicks(8804),
                            Password = new byte[] { 234, 202, 187, 230, 14, 107, 194, 209, 102, 205, 249, 209, 54, 83, 54, 70, 15, 58, 17, 72, 209, 248, 9, 92, 43, 83, 39, 87, 175, 192, 208, 128, 163, 179, 161, 87, 147, 173, 60, 38, 214, 111, 102, 204, 75, 173, 92, 4, 242, 129, 209, 125, 151, 149, 119, 4, 149, 29, 192, 65, 23, 44, 219, 116 },
                            PhoneNumber = "666666",
                            Pin = "70YWUJP",
                            RoleId = 2001,
                            Salt = new byte[] { 213, 178, 216, 56, 8, 206, 13, 120, 94, 251, 195, 33, 47, 250, 219, 209, 39, 82, 118, 150, 145, 190, 219, 50, 57, 127, 33, 81, 142, 102, 57, 23, 135, 126, 29, 209, 133, 152, 76, 176, 67, 113, 251, 52, 154, 79, 175, 123, 104, 148, 179, 152, 167, 164, 114, 165, 111, 232, 81, 237, 199, 175, 124, 70 },
                            StatusId = (byte)1,
                            Username = "f"
                        });
                });

            modelBuilder.Entity("Models.Entities.UserStatus", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("UserStatuses","status");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Active",
                            Name = "ACTIVE"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Blocked",
                            Name = "BLOCKED"
                        });
                });

            modelBuilder.Entity("Models.Entities.Branch", b =>
                {
                    b.HasOne("Models.Entities.Organization", "Organization")
                        .WithMany("Branches")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.BranchUser", b =>
                {
                    b.HasOne("Models.Entities.Branch", "Branch")
                        .WithMany("BranchesUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("BranchesUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.HasOne("Models.Entities.CertificateStatus", "CertificateStatus")
                        .WithMany()
                        .HasForeignKey("CertificateStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.CertificateType", "CertificateType")
                        .WithMany()
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Organization", "Organization")
                        .WithMany("Certificates")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Person", "Person")
                        .WithMany("Certificates")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Coupon", b =>
                {
                    b.HasOne("Models.Entities.CertificateType", "CertificateType")
                        .WithMany()
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Discount", "Discount")
                        .WithMany("Coupons")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Organization", "Organization")
                        .WithMany("Coupons")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Discount", b =>
                {
                    b.HasOne("Models.Entities.DiscountType", "DiscountType")
                        .WithMany()
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Employee", b =>
                {
                    b.HasOne("Models.Entities.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Organization", "Organization")
                        .WithMany("Employees")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Organization", b =>
                {
                    b.HasOne("Models.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.OrganizationDiscount", b =>
                {
                    b.HasOne("Models.Entities.Discount", "Discount")
                        .WithMany("OrganizationDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Organization", "Organization")
                        .WithMany("OrganizationDiscounts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.OtpCode", b =>
                {
                    b.HasOne("Models.Entities.Certificate", "Certificate")
                        .WithMany("OtpCodes")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.OtpCodeStatus", "OtpCodeStatus")
                        .WithMany()
                        .HasForeignKey("OtpCodeStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Person", b =>
                {
                    b.HasOne("Models.Entities.CitizenType", "CitizenType")
                        .WithMany()
                        .HasForeignKey("CitizenTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.GenderType", "GenderType")
                        .WithMany()
                        .HasForeignKey("GenderTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.PersonStatus", "PersonStatus")
                        .WithMany()
                        .HasForeignKey("PersonStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.PersonOrganization", b =>
                {
                    b.HasOne("Models.Entities.BranchUser", "BranchUser")
                        .WithMany()
                        .HasForeignKey("BranchUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Organization", "Organization")
                        .WithMany("PersonOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Person", "Person")
                        .WithMany("PersonOrganizations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.PinCode", b =>
                {
                    b.HasOne("Models.Entities.Certificate", "Certificate")
                        .WithOne("PinCode")
                        .HasForeignKey("Models.Entities.PinCode", "CertificateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Price", b =>
                {
                    b.HasOne("Models.Entities.CertificateType", "CertificateType")
                        .WithMany()
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.OperationPriceType", "OperationPriceType")
                        .WithMany()
                        .HasForeignKey("OperationPriceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Organization", "Organization")
                        .WithMany("Prices")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.RoleClaim", b =>
                {
                    b.HasOne("Models.Entities.Claim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.SignOperation", b =>
                {
                    b.HasOne("Models.Entities.Branch", null)
                        .WithMany("SignOperations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.SmsLog", b =>
                {
                    b.HasOne("Models.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Token", b =>
                {
                    b.HasOne("Models.Entities.TokenStatus", "TokenStatus")
                        .WithMany()
                        .HasForeignKey("TokenStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.HasOne("Models.Entities.CitizenType", "CitizenType")
                        .WithMany()
                        .HasForeignKey("CitizenTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.GenderType", "GenderType")
                        .WithMany()
                        .HasForeignKey("GenderTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entities.UserStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
